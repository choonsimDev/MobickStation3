generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String   @db.Text
  nickname  String
  password  String
  createdAt DateTime @default(now())
  postId    Int
}

model CommentAnonymous {
  id        Int      @id @default(autoincrement())
  content   String   @db.Text
  nickname  String
  password  String
  createdAt DateTime @default(now())
  postId    Int
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  phone     Int?      @unique
  username  String?
  password  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime
  deletedAt DateTime?
}

model dbAnonymousPost {
  id        Int      @id @default(autoincrement())
  title     String
  nickname  String
  password  String
  content   String   @db.Text
  thumb     Int      @default(0)
  createdAt DateTime @default(now())
  views     Int      @default(0)
}

model dbCommunityPost {
  id        Int      @id @default(autoincrement())
  title     String
  nickname  String
  password  String
  content   String   @db.Text
  thumb     Int      @default(0)
  createdAt DateTime @default(now())
  views     Int      @default(0)
}

model dbNotice {
  id        Int      @id @default(autoincrement())
  title     String
  nickname  String
  content   String   @db.Text
  createdAt DateTime @default(now())
  views     Int      @default(0)
}

//---------------------product DB
//---------------------product DB
//---------------------product DB


model Product {
  id           Int      @id @default(autoincrement())
  name         String
  description  String
  price        String
  mileage      String
  stock        String
  imageUrl     String
  categoryName String
  storeName    String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  views        Int      @default(0)
  category     Category @relation(fields: [categoryName], references: [name])
  store        Store    @relation(fields: [storeName], references: [name])

  @@index([categoryName])
  @@index([storeName])
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String
  products    Product[]
}

model Store {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String
  contactInfo String
  products    Product[]
}


//---------------------Customer DB
//---------------------Customer DB
//---------------------Customer DB

model Customer {
  id             Int       @id @default(autoincrement()) 
  username       String    @unique
  email          String    @unique
  phone          String?   @unique
  password       String?   // Optional for social logins, required for custom signup
  profileImage   String?
  mileage        Int       @default(0)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  accounts       Account[]  // Customer's social accounts (multiple providers)
  sessions       Session[]  // NextAuth session information
  addresses      Address[]  // Associated shipping addresses
  orders         Order[]    // Customer's orders
  verificationTokens VerificationToken[] // Opposite relation field for the `customer` field in the `VerificationToken` model

  @@index([id, email])  // Index for performance
}

model Account {
  id                 Int       @id @default(autoincrement())
  userId             Int
  provider           Provider  // Use enum for provider types (e.g., 'kakao', 'google', 'naver')
  providerAccountId  String    // Unique ID provided by the provider
  accessToken        String?   // Access token for social login
  refreshToken       String?   // Refresh token for social login
  expiresAt          Int?      // Token expiration time
  
  customer           Customer  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, provider])
}

enum Provider {
  KAKAO
  GOOGLE
  NAVER
  CUSTOM  // For custom email/password-based login
}

model Session {
  id           Int       @id @default(autoincrement())
  sessionToken String    @unique
  userId       Int
  expires      DateTime

  customer     Customer  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Address {
  id         Int      @id @default(autoincrement())
  userId     Int
  receiver   String
  phone      String
  postalCode String
  address    String
  detail     String?
  isDefault  Boolean  @default(false)

  customer   Customer @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders     Order[]  // Orders associated with this address

  @@index([userId, postalCode])
}

model Order {
  id            Int       @id @default(autoincrement())
  userId        Int
  addressId     Int @map("address_id") // Remove @index attribute
  totalAmount   String
  status        String
  createdAt     DateTime  @default(now())

  customer      Customer  @relation(fields: [userId], references: [id], onDelete: Cascade)
  address       Address   @relation(fields: [addressId], references: [id], onDelete: Cascade)

  @@index([userId, addressId])
}

model VerificationToken {
  id       Int      @id @default(autoincrement())
  token    String   @unique  // Token for email verification
  userId   Int
  expires  DateTime

  customer Customer @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}